{"version":3,"file":"no-effect-decorator-and-creator.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/effects/no-effect-decorator-and-creator.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport {\n  effectCreator,\n  effectDecorator,\n  getDecorator,\n  getDecoratorArguments,\n  getImportDeclarations,\n  getImportRemoveFix,\n  NGRX_MODULE_PATHS,\n} from '../../utils';\n\nexport const noEffectDecoratorAndCreator = 'noEffectDecoratorAndCreator';\nexport const noEffectDecoratorAndCreatorSuggest =\n  'noEffectDecoratorAndCreatorSuggest';\n\ntype MessageIds =\n  | typeof noEffectDecoratorAndCreator\n  | typeof noEffectDecoratorAndCreatorSuggest;\ntype Options = readonly [];\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'suggestion',\n    hasSuggestions: true,\n    ngrxModule: 'effects',\n    docs: {\n      description:\n        '`Effect` should use either the `createEffect` or the `@Effect` decorator, but not both.',\n      recommended: 'error',\n      suggestion: true,\n    },\n    fixable: 'code',\n    schema: [],\n    messages: {\n      [noEffectDecoratorAndCreator]:\n        'Using the `createEffect` and the `@Effect` decorator simultaneously is forbidden.',\n      [noEffectDecoratorAndCreatorSuggest]: 'Remove the `@Effect` decorator.',\n    },\n  },\n  defaultOptions: [],\n  create: (context) => {\n    const sourceCode = context.getSourceCode();\n\n    return {\n      [`${effectCreator}:has(${effectDecorator})`](\n        node: TSESTree.PropertyDefinition\n      ) {\n        const decorator = getDecorator(node, 'Effect');\n\n        if (!decorator) {\n          return;\n        }\n\n        const hasDecoratorArgument = Boolean(\n          getDecoratorArguments(decorator)[0]\n        );\n        const fix: TSESLint.ReportFixFunction = (fixer) =>\n          getFixes(node, sourceCode, fixer, decorator);\n\n        if (hasDecoratorArgument) {\n          context.report({\n            node: node.key,\n            messageId: noEffectDecoratorAndCreator,\n            // In this case where the argument to the `@Effect({...})`\n            // decorator exists, it is more appropriate to **suggest**\n            // instead of **fix**, since either simply removing or merging\n            // the arguments would likely generate unexpected behaviors and\n            // would be quite costly.\n            suggest: [\n              {\n                messageId: noEffectDecoratorAndCreatorSuggest,\n                fix,\n              },\n            ],\n          });\n        } else {\n          context.report({\n            node: node.key,\n            messageId: noEffectDecoratorAndCreator,\n            fix,\n          });\n        }\n      },\n    };\n  },\n});\n\nfunction getFixes(\n  node: TSESTree.PropertyDefinition,\n  sourceCode: Readonly<TSESLint.SourceCode>,\n  fixer: TSESLint.RuleFixer,\n  decorator: TSESTree.Decorator\n): readonly TSESLint.RuleFix[] {\n  const importDeclarations =\n    getImportDeclarations(node, NGRX_MODULE_PATHS.effects) ?? [];\n  const text = sourceCode.getText();\n  const totalEffectDecoratorOccurrences = getEffectDecoratorOccurrences(text);\n  const importRemoveFix =\n    totalEffectDecoratorOccurrences === 1\n      ? getImportRemoveFix(sourceCode, importDeclarations, 'Effect', fixer)\n      : [];\n\n  return [fixer.remove(decorator)].concat(importRemoveFix);\n}\n\nfunction getEffectDecoratorOccurrences(text: string) {\n  return text.replace(/\\s/g, '').match(/@Effect/g)?.length ?? 0;\n}\n"]}